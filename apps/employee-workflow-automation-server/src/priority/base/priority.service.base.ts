/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Priority as PrismaPriority,
  Task as PrismaTask,
} from "@prisma/client";

export class PriorityServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PriorityCountArgs, "select">): Promise<number> {
    return this.prisma.priority.count(args);
  }

  async priorities<T extends Prisma.PriorityFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PriorityFindManyArgs>
  ): Promise<PrismaPriority[]> {
    return this.prisma.priority.findMany<Prisma.PriorityFindManyArgs>(args);
  }
  async priority<T extends Prisma.PriorityFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PriorityFindUniqueArgs>
  ): Promise<PrismaPriority | null> {
    return this.prisma.priority.findUnique(args);
  }
  async createPriority<T extends Prisma.PriorityCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PriorityCreateArgs>
  ): Promise<PrismaPriority> {
    return this.prisma.priority.create<T>(args);
  }
  async updatePriority<T extends Prisma.PriorityUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PriorityUpdateArgs>
  ): Promise<PrismaPriority> {
    return this.prisma.priority.update<T>(args);
  }
  async deletePriority<T extends Prisma.PriorityDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PriorityDeleteArgs>
  ): Promise<PrismaPriority> {
    return this.prisma.priority.delete(args);
  }

  async findTasks(
    parentId: string,
    args: Prisma.TaskFindManyArgs
  ): Promise<PrismaTask[]> {
    return this.prisma.priority
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .tasks(args);
  }
}
