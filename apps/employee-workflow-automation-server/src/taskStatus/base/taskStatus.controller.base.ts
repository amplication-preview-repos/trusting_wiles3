/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TaskStatusService } from "../taskStatus.service";
import { TaskStatusCreateInput } from "./TaskStatusCreateInput";
import { TaskStatus } from "./TaskStatus";
import { TaskStatusFindManyArgs } from "./TaskStatusFindManyArgs";
import { TaskStatusWhereUniqueInput } from "./TaskStatusWhereUniqueInput";
import { TaskStatusUpdateInput } from "./TaskStatusUpdateInput";

export class TaskStatusControllerBase {
  constructor(protected readonly service: TaskStatusService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TaskStatus })
  async createTaskStatus(
    @common.Body() data: TaskStatusCreateInput
  ): Promise<TaskStatus> {
    return await this.service.createTaskStatus({
      data: data,
      select: {
        createdAt: true,
        id: true,
        statusName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TaskStatus] })
  @ApiNestedQuery(TaskStatusFindManyArgs)
  async taskStatuses(@common.Req() request: Request): Promise<TaskStatus[]> {
    const args = plainToClass(TaskStatusFindManyArgs, request.query);
    return this.service.taskStatuses({
      ...args,
      select: {
        createdAt: true,
        id: true,
        statusName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TaskStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async taskStatus(
    @common.Param() params: TaskStatusWhereUniqueInput
  ): Promise<TaskStatus | null> {
    const result = await this.service.taskStatus({
      where: params,
      select: {
        createdAt: true,
        id: true,
        statusName: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TaskStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTaskStatus(
    @common.Param() params: TaskStatusWhereUniqueInput,
    @common.Body() data: TaskStatusUpdateInput
  ): Promise<TaskStatus | null> {
    try {
      return await this.service.updateTaskStatus({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          statusName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TaskStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTaskStatus(
    @common.Param() params: TaskStatusWhereUniqueInput
  ): Promise<TaskStatus | null> {
    try {
      return await this.service.deleteTaskStatus({
        where: params,
        select: {
          createdAt: true,
          id: true,
          statusName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
