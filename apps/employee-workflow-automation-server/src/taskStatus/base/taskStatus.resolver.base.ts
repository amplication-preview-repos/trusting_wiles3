/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TaskStatus } from "./TaskStatus";
import { TaskStatusCountArgs } from "./TaskStatusCountArgs";
import { TaskStatusFindManyArgs } from "./TaskStatusFindManyArgs";
import { TaskStatusFindUniqueArgs } from "./TaskStatusFindUniqueArgs";
import { CreateTaskStatusArgs } from "./CreateTaskStatusArgs";
import { UpdateTaskStatusArgs } from "./UpdateTaskStatusArgs";
import { DeleteTaskStatusArgs } from "./DeleteTaskStatusArgs";
import { TaskStatusService } from "../taskStatus.service";
@graphql.Resolver(() => TaskStatus)
export class TaskStatusResolverBase {
  constructor(protected readonly service: TaskStatusService) {}

  async _taskStatusesMeta(
    @graphql.Args() args: TaskStatusCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TaskStatus])
  async taskStatuses(
    @graphql.Args() args: TaskStatusFindManyArgs
  ): Promise<TaskStatus[]> {
    return this.service.taskStatuses(args);
  }

  @graphql.Query(() => TaskStatus, { nullable: true })
  async taskStatus(
    @graphql.Args() args: TaskStatusFindUniqueArgs
  ): Promise<TaskStatus | null> {
    const result = await this.service.taskStatus(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TaskStatus)
  async createTaskStatus(
    @graphql.Args() args: CreateTaskStatusArgs
  ): Promise<TaskStatus> {
    return await this.service.createTaskStatus({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => TaskStatus)
  async updateTaskStatus(
    @graphql.Args() args: UpdateTaskStatusArgs
  ): Promise<TaskStatus | null> {
    try {
      return await this.service.updateTaskStatus({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TaskStatus)
  async deleteTaskStatus(
    @graphql.Args() args: DeleteTaskStatusArgs
  ): Promise<TaskStatus | null> {
    try {
      return await this.service.deleteTaskStatus(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
