/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ClientStageService } from "../clientStage.service";
import { ClientStageCreateInput } from "./ClientStageCreateInput";
import { ClientStage } from "./ClientStage";
import { ClientStageFindManyArgs } from "./ClientStageFindManyArgs";
import { ClientStageWhereUniqueInput } from "./ClientStageWhereUniqueInput";
import { ClientStageUpdateInput } from "./ClientStageUpdateInput";

export class ClientStageControllerBase {
  constructor(protected readonly service: ClientStageService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ClientStage })
  async createClientStage(
    @common.Body() data: ClientStageCreateInput
  ): Promise<ClientStage> {
    return await this.service.createClientStage({
      data: data,
      select: {
        comments: true,
        createdAt: true,
        id: true,
        stageName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ClientStage] })
  @ApiNestedQuery(ClientStageFindManyArgs)
  async clientStages(@common.Req() request: Request): Promise<ClientStage[]> {
    const args = plainToClass(ClientStageFindManyArgs, request.query);
    return this.service.clientStages({
      ...args,
      select: {
        comments: true,
        createdAt: true,
        id: true,
        stageName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ClientStage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async clientStage(
    @common.Param() params: ClientStageWhereUniqueInput
  ): Promise<ClientStage | null> {
    const result = await this.service.clientStage({
      where: params,
      select: {
        comments: true,
        createdAt: true,
        id: true,
        stageName: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ClientStage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateClientStage(
    @common.Param() params: ClientStageWhereUniqueInput,
    @common.Body() data: ClientStageUpdateInput
  ): Promise<ClientStage | null> {
    try {
      return await this.service.updateClientStage({
        where: params,
        data: data,
        select: {
          comments: true,
          createdAt: true,
          id: true,
          stageName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ClientStage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteClientStage(
    @common.Param() params: ClientStageWhereUniqueInput
  ): Promise<ClientStage | null> {
    try {
      return await this.service.deleteClientStage({
        where: params,
        select: {
          comments: true,
          createdAt: true,
          id: true,
          stageName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
