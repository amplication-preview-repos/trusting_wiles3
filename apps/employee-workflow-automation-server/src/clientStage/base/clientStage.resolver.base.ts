/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ClientStage } from "./ClientStage";
import { ClientStageCountArgs } from "./ClientStageCountArgs";
import { ClientStageFindManyArgs } from "./ClientStageFindManyArgs";
import { ClientStageFindUniqueArgs } from "./ClientStageFindUniqueArgs";
import { CreateClientStageArgs } from "./CreateClientStageArgs";
import { UpdateClientStageArgs } from "./UpdateClientStageArgs";
import { DeleteClientStageArgs } from "./DeleteClientStageArgs";
import { ClientStageService } from "../clientStage.service";
@graphql.Resolver(() => ClientStage)
export class ClientStageResolverBase {
  constructor(protected readonly service: ClientStageService) {}

  async _clientStagesMeta(
    @graphql.Args() args: ClientStageCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ClientStage])
  async clientStages(
    @graphql.Args() args: ClientStageFindManyArgs
  ): Promise<ClientStage[]> {
    return this.service.clientStages(args);
  }

  @graphql.Query(() => ClientStage, { nullable: true })
  async clientStage(
    @graphql.Args() args: ClientStageFindUniqueArgs
  ): Promise<ClientStage | null> {
    const result = await this.service.clientStage(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ClientStage)
  async createClientStage(
    @graphql.Args() args: CreateClientStageArgs
  ): Promise<ClientStage> {
    return await this.service.createClientStage({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ClientStage)
  async updateClientStage(
    @graphql.Args() args: UpdateClientStageArgs
  ): Promise<ClientStage | null> {
    try {
      return await this.service.updateClientStage({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ClientStage)
  async deleteClientStage(
    @graphql.Args() args: DeleteClientStageArgs
  ): Promise<ClientStage | null> {
    try {
      return await this.service.deleteClientStage(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
