/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ClientStage as PrismaClientStage } from "@prisma/client";

export class ClientStageServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ClientStageCountArgs, "select">
  ): Promise<number> {
    return this.prisma.clientStage.count(args);
  }

  async clientStages<T extends Prisma.ClientStageFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClientStageFindManyArgs>
  ): Promise<PrismaClientStage[]> {
    return this.prisma.clientStage.findMany<Prisma.ClientStageFindManyArgs>(
      args
    );
  }
  async clientStage<T extends Prisma.ClientStageFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClientStageFindUniqueArgs>
  ): Promise<PrismaClientStage | null> {
    return this.prisma.clientStage.findUnique(args);
  }
  async createClientStage<T extends Prisma.ClientStageCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClientStageCreateArgs>
  ): Promise<PrismaClientStage> {
    return this.prisma.clientStage.create<T>(args);
  }
  async updateClientStage<T extends Prisma.ClientStageUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClientStageUpdateArgs>
  ): Promise<PrismaClientStage> {
    return this.prisma.clientStage.update<T>(args);
  }
  async deleteClientStage<T extends Prisma.ClientStageDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClientStageDeleteArgs>
  ): Promise<PrismaClientStage> {
    return this.prisma.clientStage.delete(args);
  }
}
